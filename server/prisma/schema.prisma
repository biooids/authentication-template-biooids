// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(uuid())
  name                String
  username            String    @unique
  email               String    @unique
  emailVerified       Boolean   @default(false)
  hashedPassword      String?
  bio                 String?
  title               String?
  location            String?
  profileImage        String?   @default("https://res.cloudinary.com/djtww0vax/image/upload/v1747766773/xi-biooid_bstapi.jpg")
  bannerImage         String?   @default("https://res.cloudinary.com/djtww0vax/image/upload/v1747766773/xi-biooid_bstapi.jpg")
  joinedAt            DateTime  @default(now()) @map("joined_at")
  updatedAt           DateTime  @updatedAt
  systemRole          SystemRole @default(USER)
  deactivatedAt       DateTime?
  twitterUrl          String?
  githubUrl           String?
  linkedinUrl         String?
  websiteUrl          String?

  refreshTokens       RefreshToken[]
  settings            UserSettings?
  passwordResetTokens PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]

  @@map("users")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("email_verification_tokens")
}

model RefreshToken {
  id        String   @id @default(uuid())
  jti       String   @unique
  userId    String
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("refresh_tokens")
}

model UserSettings {
  id                   String          @id @default(uuid())
  theme                ThemePreference @default(SYSTEM)
  notificationsEnabled Boolean         @default(true)
  emailMarketing       Boolean         @default(false)
  emailSocial          Boolean         @default(true)
  updatedAt            DateTime        @updatedAt
  userId               String          @unique
  user                 User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

enum SystemRole {
  USER
  SYSTEM_CONTENT_CREATOR
  DEVELOPER
  SUPER_ADMIN
}

enum ThemePreference {
  LIGHT
  DARK
  SYSTEM
}